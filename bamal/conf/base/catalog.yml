# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://kedro.readthedocs.io/en/stable/05_data/01_data_catalog.html

#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataSet
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataSet
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataSet
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different DataSet implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://kedro.readthedocs.io/en/stable/04_user_guide/04_data_catalog.html
#
# This is a data set used by the "Hello World" example pipeline provided with the project
# template. Please feel free to remove it once you remove the example pipeline.

# raw datasets
X_train_full:
  type: pickle.PickleDataSet
  filepath: data/01_raw/X_train_full.pkl

y_train_full:
  type: pickle.PickleDataSet
  filepath: data/01_raw/y_train_full.pkl

X_test:
  type: pickle.PickleDataSet
  filepath: data/01_raw/X_test.pkl

y_test:
  type: pickle.PickleDataSet
  filepath: data/01_raw/y_test.pkl


# intermediate dataset and results
X_train_trunc:
  type: pickle.PickleDataSet
  filepath: data/02_intermediate/X_train_trunc.pkl

y_train_trunc:
  type: pickle.PickleDataSet
  filepath: data/02_intermediate/y_train_trunc.pkl

K_FIXE:
  type: pickle.PickleDataSet
  filepath: data/02_intermediate/k_fixe.pkl

al_perfs:
  type: pickle.PickleDataSet
  filepath: data/02_intermediate/al_perfs.pkl

al_lam_perfs:
  type: pickle.PickleDataSet
  filepath: data/02_intermediate/al_lam_perfs.pkl

b_descent_perfs:
  type: pickle.PickleDataSet
  filepath: data/02_intermediate/b_descent_perfs.pkl

b_ascent_perfs:
  type: pickle.PickleDataSet
  filepath: data/02_intermediate/b_ascent_perfs.pkl

pl_perfs:
  type: pickle.PickleDataSet
  filepath: data/02_intermediate/pl_perfs.pkl

# reporting
line_box:
  type: kedro_mlflow.io.artifacts.MlflowArtifactDataSet
  data_set:
    type: matplotlib.MatplotlibWriter  # or any valid kedro DataSet
    filepath: data/08_reporting/line_box.png
    save_args:
      bbox_inches: 'tight'

line_line:
  type: kedro_mlflow.io.artifacts.MlflowArtifactDataSet
  data_set:
    type: matplotlib.MatplotlibWriter  # or any valid kedro DataSet
    filepath: data/08_reporting/line_line.png
    save_args:
      bbox_inches: 'tight'

batch_line_line:
  type: kedro_mlflow.io.artifacts.MlflowArtifactDataSet
  data_set:
    type: matplotlib.MatplotlibWriter  # or any valid kedro DataSet
    filepath: data/08_reporting/batch_line_line.png
    save_args:
      bbox_inches: 'tight'


lambda_line_line:
  type: kedro_mlflow.io.artifacts.MlflowArtifactDataSet
  data_set:
    type: matplotlib.MatplotlibWriter  # or any valid kedro DataSet
    filepath: data/08_reporting/lambda_line_line.png
    save_args:
      bbox_inches: 'tight'

b_descent_line_line:
  type: kedro_mlflow.io.artifacts.MlflowArtifactDataSet
  data_set:
    type: matplotlib.MatplotlibWriter  # or any valid kedro DataSet
    filepath: data/08_reporting/b_descent_line_line.png
    save_args:
      bbox_inches: 'tight'